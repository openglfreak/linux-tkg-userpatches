From 73c489f8cac933d021d41c25f82f44bb6a9707d1 Mon Sep 17 00:00:00 2001
From: Sergei Miroshnichenko <s.miroshnichenko@yadro.com>
Date: Wed, 13 May 2020 13:10:25 +0300
Subject: [PATCH 50/57] PCI: hotplug: movable bus numbers: compact the gaps in
 numbering

If bus numbers are distributed sparsely and there are lot of devices in the
tree, hotplugging a bridge into the end of the tree may fail even if it has
less slots then the total number of unused bus numbers.

Thus, the feature of bus renaming relies on the continuity of bus numbers,
so if a bridge was unplugged, the gap in bus numbers must be compacted.

Let's densify the bus numbering at the beginning of a next PCI rescan.

Signed-off-by: Sergei Miroshnichenko <s.miroshnichenko@yadro.com>
---
 drivers/pci/probe.c  | 27 +++++++++++++++++++++++++++
 drivers/pci/remove.c | 32 +++++++++++++++++++++++++++++++-
 2 files changed, 58 insertions(+), 1 deletion(-)

diff --git a/drivers/pci/probe.c b/drivers/pci/probe.c
index 111111111..111111111 100644
--- a/drivers/pci/probe.c
+++ b/drivers/pci/probe.c
@@ -1483,6 +1483,30 @@ static bool pci_new_bus_needed(struct pci_bus *bus, const struct pci_dev *self)
 	return true;
 }
 
+static void pci_compact_bus_numbers(const int domain, const struct resource *valid_range)
+{
+	int busnr_p1 = valid_range->start;
+
+	while (busnr_p1 < valid_range->end) {
+		int busnr_p2 = busnr_p1 + 1;
+		struct pci_bus *bus_p2;
+		int delta;
+
+		while (busnr_p2 <= valid_range->end &&
+		       !(bus_p2 = pci_find_bus(domain, busnr_p2)))
+			++busnr_p2;
+
+		if (!bus_p2 || busnr_p2 > valid_range->end)
+			break;
+
+		delta = busnr_p1 - busnr_p2 + 1;
+		if (delta)
+			pci_move_buses(domain, busnr_p2, delta, valid_range);
+
+		++busnr_p1;
+	}
+}
+
 static unsigned int pci_scan_child_bus_extend(struct pci_bus *bus,
 					      unsigned int available_buses);
 /**
@@ -3949,6 +3973,9 @@ unsigned int pci_rescan_bus(struct pci_bus *bus)
 		pcibios_root_bus_rescan_prepare(root);
 		pci_bus_update_fixed_range(root);
 
+		pci_compact_bus_numbers(pci_domain_nr(bus),
+					&root->busn_res);
+
 		max = pci_scan_child_bus(root);
 
 		pci_bus_release_root_bridge_resources(root);
diff --git a/drivers/pci/remove.c b/drivers/pci/remove.c
index 111111111..111111111 100644
--- a/drivers/pci/remove.c
+++ b/drivers/pci/remove.c
@@ -83,9 +83,36 @@ static void pci_stop_bus_device(struct pci_dev *dev)
 	pci_stop_dev(dev);
 }
 
+static void pci_contract_buses(struct pci_bus *bus)
+{
+	struct pci_dev *child, *tmp;
+	int last_bus;
+
+	if (!bus || pci_is_root_bus(bus) || !bus->self)
+		return;
+
+	last_bus = bus->number;
+
+	list_for_each_entry_safe(child, tmp, &bus->devices, bus_list)
+		if (child->subordinate)
+			if (last_bus < child->subordinate->busn_res.end)
+				last_bus = child->subordinate->busn_res.end;
+
+	if (last_bus < bus->busn_res.end) {
+		u32 buses;
+
+		bus->busn_res.end = last_bus;
+		pci_read_config_dword(bus->self, PCI_PRIMARY_BUS, &buses);
+		buses = (buses & 0xff00ffff) | (last_bus << 16);
+		pci_write_config_dword(bus->self, PCI_PRIMARY_BUS, buses);
+	}
+
+	pci_contract_buses(bus->parent);
+}
+
 static void pci_remove_bus_device(struct pci_dev *dev)
 {
-	struct pci_bus *bus = dev->subordinate;
+	struct pci_bus *bus = dev->subordinate, *parent = dev->bus;
 	struct pci_dev *child, *tmp;
 
 	if (bus) {
@@ -98,6 +125,9 @@ static void pci_remove_bus_device(struct pci_dev *dev)
 	}
 
 	pci_destroy_dev(dev);
+
+	if (bus)
+		pci_contract_buses(parent);
 }
 
 /**

