From 9d9b538bb3cc7d2da0e378a7a3b175bf3b5d8b63 Mon Sep 17 00:00:00 2001
From: Sergei Miroshnichenko <s.miroshnichenko@yadro.com>
Date: Wed, 13 May 2020 13:09:07 +0300
Subject: [PATCH 33/57] powerpc/pci: Create pci_dn on demand

If a struct pci_dn hasn't yet been created for the PCIe device (there was
no DT node for it), allocate this structure and fill with info read from
the device directly.

CC: Oliver O'Halloran <oohall@gmail.com>
CC: Sam Bobroff <sbobroff@linux.ibm.com>
Signed-off-by: Sergei Miroshnichenko <s.miroshnichenko@yadro.com>
---
 arch/powerpc/include/asm/pci-bridge.h |   1 +
 arch/powerpc/kernel/pci-hotplug.c     |   2 +
 arch/powerpc/kernel/pci_dn.c          | 150 +++++++++++++++++++-------
 3 files changed, 114 insertions(+), 39 deletions(-)

diff --git a/arch/powerpc/include/asm/pci-bridge.h b/arch/powerpc/include/asm/pci-bridge.h
index 111111111..111111111 100644
--- a/arch/powerpc/include/asm/pci-bridge.h
+++ b/arch/powerpc/include/asm/pci-bridge.h
@@ -229,6 +229,7 @@ extern struct pci_dn *pci_get_pdn(struct pci_dev *pdev);
 extern struct pci_dn *pci_add_device_node_info(struct pci_controller *hose,
 					       struct device_node *dn);
 extern void pci_remove_device_node_info(struct device_node *dn);
+extern void pci_free_pdn(struct pci_dn *pdn);
 
 #ifdef CONFIG_PCI_IOV
 struct pci_dn *add_sriov_vf_pdns(struct pci_dev *pdev);
diff --git a/arch/powerpc/kernel/pci-hotplug.c b/arch/powerpc/kernel/pci-hotplug.c
index 111111111..111111111 100644
--- a/arch/powerpc/kernel/pci-hotplug.c
+++ b/arch/powerpc/kernel/pci-hotplug.c
@@ -65,6 +65,8 @@ void pcibios_release_device(struct pci_dev *dev)
 	if (pdn && (pdn->flags & PCI_DN_FLAG_DEAD)) {
 		pci_dbg(dev, "freeing dead pdn\n");
 		kfree(pdn);
+	} else if (pdn && pci_has_flag(PCI_REASSIGN_ALL_BUS)) {
+		pci_free_pdn(pdn);
 	}
 }
 
diff --git a/arch/powerpc/kernel/pci_dn.c b/arch/powerpc/kernel/pci_dn.c
index 111111111..111111111 100644
--- a/arch/powerpc/kernel/pci_dn.c
+++ b/arch/powerpc/kernel/pci_dn.c
@@ -20,6 +20,9 @@
 #include <asm/firmware.h>
 #include <asm/eeh.h>
 
+static struct pci_dn *pci_create_pdn_from_dev(struct pci_dev *pdev,
+					      struct pci_dn *parent);
+
 /*
  * The function is used to find the firmware data of one
  * specific PCI device, which is attached to the indicated
@@ -52,6 +55,9 @@ static struct pci_dn *pci_bus_to_pdn(struct pci_bus *bus)
 	dn = pci_bus_to_OF_node(pbus);
 	pdn = dn ? PCI_DN(dn) : NULL;
 
+	if (!pdn && pbus->self)
+		pdn = pbus->self->dev.archdata.pci_data;
+
 	return pdn;
 }
 
@@ -61,10 +67,13 @@ struct pci_dn *pci_get_pdn_by_devfn(struct pci_bus *bus,
 	struct device_node *dn = NULL;
 	struct pci_dn *parent, *pdn;
 	struct pci_dev *pdev = NULL;
+	bool pdev_found = false;
 
 	/* Fast path: fetch from PCI device */
 	list_for_each_entry(pdev, &bus->devices, bus_list) {
 		if (pdev->devfn == devfn) {
+			pdev_found = true;
+
 			if (pdev->dev.archdata.pci_data)
 				return pdev->dev.archdata.pci_data;
 
@@ -73,6 +82,9 @@ struct pci_dn *pci_get_pdn_by_devfn(struct pci_bus *bus,
 		}
 	}
 
+	if (!pdev_found)
+		pdev = NULL;
+
 	/* Fast path: fetch from device node */
 	pdn = dn ? PCI_DN(dn) : NULL;
 	if (pdn)
@@ -85,9 +97,12 @@ struct pci_dn *pci_get_pdn_by_devfn(struct pci_bus *bus,
 
 	list_for_each_entry(pdn, &parent->child_list, list) {
 		if (pdn->busno == bus->number &&
-                    pdn->devfn == devfn)
-                        return pdn;
-        }
+		    pdn->devfn == devfn) {
+			if (pdev)
+				pdev->dev.archdata.pci_data = pdn;
+			return pdn;
+		}
+	}
 
 	return NULL;
 }
@@ -117,11 +132,13 @@ struct pci_dn *pci_get_pdn(struct pci_dev *pdev)
 
 	list_for_each_entry(pdn, &parent->child_list, list) {
 		if (pdn->busno == pdev->bus->number &&
-		    pdn->devfn == pdev->devfn)
+		    pdn->devfn == pdev->devfn) {
+			pdev->dev.archdata.pci_data = pdn;
 			return pdn;
+		}
 	}
 
-	return NULL;
+	return pci_create_pdn_from_dev(pdev, parent);
 }
 
 #ifdef CONFIG_EEH
@@ -144,9 +161,8 @@ static struct eeh_dev *eeh_dev_init(struct pci_dn *pdn)
 }
 #endif /* CONFIG_EEH */
 
-#ifdef CONFIG_PCI_IOV
-static struct pci_dn *add_one_sriov_vf_pdn(struct pci_dn *parent,
-					   int busno, int devfn)
+static struct pci_dn *pci_alloc_pdn(struct pci_dn *parent,
+				    int busno, int devfn)
 {
 	struct pci_dn *pdn;
 
@@ -170,6 +186,89 @@ static struct pci_dn *add_one_sriov_vf_pdn(struct pci_dn *parent,
 	return pdn;
 }
 
+static struct pci_dn *pci_create_pdn_from_dev(struct pci_dev *pdev,
+					      struct pci_dn *parent)
+{
+	struct pci_dn *pdn = NULL;
+	u32 class_code;
+	u16 device_id;
+	u16 vendor_id;
+
+	if (!parent)
+		return NULL;
+
+	pci_info(pdev, "Create a new pdn\n");
+	pdn = pci_alloc_pdn(parent, pdev->bus->busn_res.start, pdev->devfn);
+
+	if (!pdn) {
+		pci_err(pdev, "%s: Failed to allocate pdn\n", __func__);
+		return NULL;
+	}
+
+	#ifdef CONFIG_EEH
+	if (!eeh_dev_init(pdn)) {
+		kfree(pdn);
+		pci_err(pdev, "%s: Failed to allocate edev\n", __func__);
+		return NULL;
+	}
+	#endif /* CONFIG_EEH */
+
+	pci_bus_read_config_word(pdev->bus, pdev->devfn,
+				 PCI_VENDOR_ID, &vendor_id);
+	pdn->vendor_id = vendor_id;
+
+	pci_bus_read_config_word(pdev->bus, pdev->devfn,
+				 PCI_DEVICE_ID, &device_id);
+	pdn->device_id = device_id;
+
+	pci_bus_read_config_dword(pdev->bus, pdev->devfn,
+				  PCI_CLASS_REVISION, &class_code);
+	class_code >>= 8;
+	pdn->class_code = class_code;
+
+	pdev->dev.archdata.pci_data = pdn;
+
+	return pdn;
+}
+
+void pci_free_pdn(struct pci_dn *pdn)
+{
+	struct eeh_dev *edev __maybe_unused;
+
+	if (!pdn)
+		return;
+
+	WARN_ON(!list_empty(&pdn->child_list));
+
+#ifdef CONFIG_EEH
+	/*
+	 * Release EEH state for this VF. The PCI core
+	 * has already torn down the pci_dev for this VF, but
+	 * we're responsible to removing the eeh_dev since it
+	 * has the same lifetime as the pci_dn that spawned it.
+	 */
+	edev = pdn_to_eeh_dev(pdn);
+	if (edev) {
+		/*
+		 * We allocate pci_dn's for the totalvfs count,
+		 * but only only the vfs that were activated
+		 * have a configured PE.
+		 */
+		if (edev->pe)
+			eeh_pe_tree_remove(edev);
+
+		pdn->edev = NULL;
+		kfree(edev);
+	}
+#endif /* CONFIG_EEH */
+
+	if (!list_empty(&pdn->list))
+		list_del(&pdn->list);
+
+	kfree(pdn);
+}
+
+#ifdef CONFIG_PCI_IOV
 struct pci_dn *add_sriov_vf_pdns(struct pci_dev *pdev)
 {
 	struct pci_dn *parent, *pdn;
@@ -192,9 +291,9 @@ struct pci_dn *add_sriov_vf_pdns(struct pci_dev *pdev)
 	for (i = 0; i < pci_sriov_get_totalvfs(pdev); i++) {
 		struct eeh_dev *edev __maybe_unused;
 
-		pdn = add_one_sriov_vf_pdn(parent,
-					   pci_iov_virtfn_bus(pdev, i),
-					   pci_iov_virtfn_devfn(pdev, i));
+		pdn = pci_alloc_pdn(parent,
+				    pci_iov_virtfn_bus(pdev, i),
+				    pci_iov_virtfn_devfn(pdev, i));
 		if (!pdn) {
 			dev_warn(&pdev->dev, "%s: Cannot create firmware data for VF#%d\n",
 				 __func__, i);
@@ -240,40 +339,13 @@ void remove_sriov_vf_pdns(struct pci_dev *pdev)
 	 * a batch mode.
 	 */
 	for (i = 0; i < pci_sriov_get_totalvfs(pdev); i++) {
-		struct eeh_dev *edev __maybe_unused;
-
 		list_for_each_entry_safe(pdn, tmp,
 			&parent->child_list, list) {
 			if (pdn->busno != pci_iov_virtfn_bus(pdev, i) ||
 			    pdn->devfn != pci_iov_virtfn_devfn(pdev, i))
 				continue;
 
-#ifdef CONFIG_EEH
-			/*
-			 * Release EEH state for this VF. The PCI core
-			 * has already torn down the pci_dev for this VF, but
-			 * we're responsible to removing the eeh_dev since it
-			 * has the same lifetime as the pci_dn that spawned it.
-			 */
-			edev = pdn_to_eeh_dev(pdn);
-			if (edev) {
-				/*
-				 * We allocate pci_dn's for the totalvfs count,
-				 * but only only the vfs that were activated
-				 * have a configured PE.
-				 */
-				if (edev->pe)
-					eeh_pe_tree_remove(edev);
-
-				pdn->edev = NULL;
-				kfree(edev);
-			}
-#endif /* CONFIG_EEH */
-
-			if (!list_empty(&pdn->list))
-				list_del(&pdn->list);
-
-			kfree(pdn);
+			pci_free_pdn(pdn);
 		}
 	}
 }

