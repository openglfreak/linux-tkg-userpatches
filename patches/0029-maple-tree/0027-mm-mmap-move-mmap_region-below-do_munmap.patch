From patchwork Tue Sep  6 19:48:52 2022
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Liam Howlett <Liam.Howlett@Oracle.com>
X-Patchwork-Id: 12968067
Return-Path: <owner-linux-mm@kvack.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from kanga.kvack.org (kanga.kvack.org [205.233.56.17])
	by smtp.lore.kernel.org (Postfix) with ESMTP id BA05BC38145
	for <linux-mm@archiver.kernel.org>; Tue,  6 Sep 2022 19:49:16 +0000 (UTC)
Received: by kanga.kvack.org (Postfix)
	id 609E8940008; Tue,  6 Sep 2022 15:49:06 -0400 (EDT)
Received: by kanga.kvack.org (Postfix, from userid 40)
	id 592D68D0005; Tue,  6 Sep 2022 15:49:06 -0400 (EDT)
X-Delivered-To: int-list-linux-mm@kvack.org
Received: by kanga.kvack.org (Postfix, from userid 63042)
	id 2FC33940008; Tue,  6 Sep 2022 15:49:06 -0400 (EDT)
X-Delivered-To: linux-mm@kvack.org
Received: from relay.hostedemail.com (smtprelay0012.hostedemail.com
 [216.40.44.12])
	by kanga.kvack.org (Postfix) with ESMTP id 11B8D8D0005
	for <linux-mm@kvack.org>; Tue,  6 Sep 2022 15:49:06 -0400 (EDT)
Received: from smtpin25.hostedemail.com (a10.router.float.18 [10.200.18.1])
	by unirelay06.hostedemail.com (Postfix) with ESMTP id DF519A167E
	for <linux-mm@kvack.org>; Tue,  6 Sep 2022 19:49:05 +0000 (UTC)
X-FDA: 79882699050.25.720E27A
Received: from mx0a-00069f02.pphosted.com (mx0a-00069f02.pphosted.com
 [205.220.165.32])
	by imf01.hostedemail.com (Postfix) with ESMTP id 589124006A
	for <linux-mm@kvack.org>; Tue,  6 Sep 2022 19:49:05 +0000 (UTC)
Received: from pps.filterd (m0246629.ppops.net [127.0.0.1])
	by mx0b-00069f02.pphosted.com (8.17.1.5/8.17.1.5) with ESMTP id
 286Id928024655;
	Tue, 6 Sep 2022 19:49:04 GMT
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=oracle.com;
 h=from : to : cc :
 subject : date : message-id : references : in-reply-to : content-type :
 content-transfer-encoding : mime-version; s=corp-2022-7-12;
 bh=1X73abYCSHfmiTYUnHvgH/HGa3HR3FhkVaBYugW90ms=;
 b=jKnD4GHlcRyrgIXI2eDJCBJJcYaoCDxVnn9t/QytvAvtHLu04jQk7N3tyoaHBhxDEuoH
 d81umcE6O1PskaY2c9JrAi0YMKdMHQ0J5FtH6Jh7l2g3MUhTfOGXEq80WvZDUGVQ7uHg
 EtEJmES8+uBK7ooa8W9dJxJiiaZN1Btu6qRp8h1IXmgxvCnY+Tw7MFZW41xnjCdojKIo
 u0oXM2mXEhfATIi843Q8ujAjpboA/KxAGGZ7LBOP0igi7VowD0iZagT6jyy60AFGaKqv
 Yq6M+1HR/08zJfhvKzCIsqovAeY+89Al1FeDay9Ora4CZHg73PJa/9uSjaky2/eojuVm XA==
Received: from iadpaimrmta02.imrmtpd1.prodappiadaev1.oraclevcn.com
 (iadpaimrmta02.appoci.oracle.com [147.154.18.20])
	by mx0b-00069f02.pphosted.com (PPS) with ESMTPS id 3jbxtaet61-1
	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=OK);
	Tue, 06 Sep 2022 19:49:04 +0000
Received: from pps.filterd
 (iadpaimrmta02.imrmtpd1.prodappiadaev1.oraclevcn.com [127.0.0.1])
	by iadpaimrmta02.imrmtpd1.prodappiadaev1.oraclevcn.com (8.17.1.5/8.17.1.5)
 with ESMTP id 286JN9wk027549;
	Tue, 6 Sep 2022 19:49:02 GMT
Received: from nam12-dm6-obe.outbound.protection.outlook.com
 (mail-dm6nam12lp2170.outbound.protection.outlook.com [104.47.59.170])
	by iadpaimrmta02.imrmtpd1.prodappiadaev1.oraclevcn.com (PPS) with ESMTPS id
 3jbwc9kvwt-12
	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=OK);
	Tue, 06 Sep 2022 19:49:02 +0000
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=MhTooJSraXVAwKW854KJJ/Erl/hvwMEhCzJsy27OAG65UkSxVapuvXWy1B8I+jXl/6ocO7ulDGh3U9q12ERZfQQEEwV7401TiUe5yMArtaQ53d8EiD67TrMb38oecQvy0PlXV6pvBJqif7axgYFZjrH7LukZCFQdl3iDOg7hMgf+A0BxbC2y7gvqYujMGqkBWXQHI9nJQh/zINK+6LLbFanrcBctTS4oEvhIpCGx+WF7PGrZwg6Heio9jvWEZwCZvJj+LdkERM+h7xiSV22z8cCR1Ifln6vHsXKUcWnKsCu/x6lim+hUBfmJu33TQUmlczL5+nz9+3Pu7WO73axiJQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=1X73abYCSHfmiTYUnHvgH/HGa3HR3FhkVaBYugW90ms=;
 b=UzaBYfuDmQ1ysoTvQd1LPSyfOhlchMOip4kdphxOps78iWlEGW4PRe2qoIdyBp3cvfjKA+4dh7pB+xrFXPhyOiD5pTOD3X7NLTL4fwqxyiL24XvE+PNwZ4XeCBfuomwwnItncnv4n8KCqP6ubnVgXXKkqmzXwppxpARaaNnXh3hDIbtp1RvRVoRfHxvrdUPR8kTlFI0iQEqN4UN3PAFyEU2jmbGFCvPq7pI4OoTODu2xTg4h3Ra34Yn2ph85u2FyWXBNJWvXxWAEnrhHi0LQZZPYz0l1u38n9xQKevvxchm1fKnRBKL4AGjLSEE/9hT8q0aeqoMCSs94L5LXlS5nJQ==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=oracle.com; dmarc=pass action=none header.from=oracle.com;
 dkim=pass header.d=oracle.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=oracle.onmicrosoft.com; s=selector2-oracle-onmicrosoft-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=1X73abYCSHfmiTYUnHvgH/HGa3HR3FhkVaBYugW90ms=;
 b=REMO6+/OfGHUftH3igJ5hN5p+3F8WqI7yaTa1ilVN+3mkIQqS1KtZgX8Ba/QWeAWNalNUnyZXwc1ngQBV8xXoHs0MuoiGZgu0b6PhfaLdYMhd+CrkYC0wuDtYoPmsNYQysc8/DJPZ2UsKtgkGx7grmwc2X4LWgqK3RSPX4ImXQI=
Received: from SN6PR10MB3022.namprd10.prod.outlook.com (2603:10b6:805:d8::25)
 by SJ0PR10MB4670.namprd10.prod.outlook.com (2603:10b6:a03:2dc::12) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.5588.10; Tue, 6 Sep
 2022 19:49:00 +0000
Received: from SN6PR10MB3022.namprd10.prod.outlook.com
 ([fe80::a420:3107:436d:d223]) by SN6PR10MB3022.namprd10.prod.outlook.com
 ([fe80::a420:3107:436d:d223%5]) with mapi id 15.20.5588.018; Tue, 6 Sep 2022
 19:49:00 +0000
From: Liam Howlett <liam.howlett@oracle.com>
To: "maple-tree@lists.infradead.org" <maple-tree@lists.infradead.org>,
        "linux-mm@kvack.org" <linux-mm@kvack.org>,
        "linux-kernel@vger.kernel.org"
	<linux-kernel@vger.kernel.org>,
        Andrew Morton <akpm@linux-foundation.org>
CC: Liam Howlett <liam.howlett@oracle.com>
Subject: [PATCH v14 27/70] mm/mmap: move mmap_region() below do_munmap()
Thread-Topic: [PATCH v14 27/70] mm/mmap: move mmap_region() below do_munmap()
Thread-Index: AQHYwimwlTUVcQVnzUiCq0Ow5bLIqA==
Date: Tue, 6 Sep 2022 19:48:52 +0000
Message-ID: <20220906194824.2110408-28-Liam.Howlett@oracle.com>
References: <20220906194824.2110408-1-Liam.Howlett@oracle.com>
In-Reply-To: <20220906194824.2110408-1-Liam.Howlett@oracle.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-mailer: git-send-email 2.35.1
x-ms-publictraffictype: Email
x-ms-office365-filtering-correlation-id: 3579d67e-0651-425d-800d-08da9040d832
x-ms-traffictypediagnostic: SJ0PR10MB4670:EE_
x-ms-exchange-senderadcheck: 1
x-ms-exchange-antispam-relay: 0
x-microsoft-antispam: BCL:0;
x-microsoft-antispam-message-info: 
 GHMDRyKOvCJe23Yjt7jPraxZlTRyXLAAMBr3sFOcSAUdsuiYwrl8vd9FxIH055MuG14hWj0khFTKJcY0V9qx4wokUTXJFvniHgfdFu9nWrAVD976B79rBKiVGFqaa1gZhBaIb3NNsMuMbhrS7Ex9EEijhu1Luxxf+tn96uHtZUlSI1eDzfFLDKrVrH7BDaT08luMOAvtOmuGUT1RreyKqkkqToNiizxk2nSSyggU5cYBmVLzhw+2+l1HH7uTtnnCxUndLaSddwsPptMofKSsgPbaqzTsmQKFnPguC5E7OctjOlGZPaMcSBl23oPsWxdo2Ty0HfH1AM9cfcJz1A/i6sxRXy6yz2Bg4DxGOs5dnZJ2oN1b4doWUdaMy3g2f1onlnMpP0s1o+oEIzEsto+wQ/LnCnVCUfDocFbhuXZ80Od7+TcJVqZ2r634L7/sAeDYcl2e7tKdzidw8o7v/7wqFse9G+6xgMSoiAUYzHfqFuz47iD/tuF5UdfomcVCnR8Ab74s+IW8tSb2wxQKV7IaTzUr5isLg2mihE+BrtAZW0Lr0b9S3Bh/LBM9FORDxVcCXiJuV5fBKnWuQBE5iwAfdAfHA/f4022b49Ef66ZixabKKxp3cWZjcT57Nbrq5OMAX41WuyMtBqAakKOCQLyGYeuQ4Y8vxPVQs75IRWccIkHBWr58zyKGvnAwIsiDM0u7TzKMXDEl8HGkrydexxa4JZrMjRXXzid+ruxSmSE6nGbdg9Oueaw5eClwht1Oa6sROqJMXeAcRJsl7AVPtMytVQ==
x-forefront-antispam-report: 
 CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:SN6PR10MB3022.namprd10.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230016)(366004)(39860400002)(376002)(346002)(396003)(136003)(6486002)(83380400001)(107886003)(6512007)(2906002)(26005)(6506007)(66446008)(186003)(122000001)(1076003)(4326008)(66556008)(66476007)(2616005)(76116006)(64756008)(66946007)(8676002)(91956017)(478600001)(36756003)(44832011)(8936002)(316002)(86362001)(41300700001)(5660300002)(38070700005)(110136005)(30864003)(71200400001)(6666004)(38100700002);DIR:OUT;SFP:1101;
x-ms-exchange-antispam-messagedata-chunkcount: 1
x-ms-exchange-antispam-messagedata-0: =?iso-8859-1?q?ZZ9WWJmQKDsvlrHj23BhnMB?=
	=?iso-8859-1?q?5MuiVoIu4+sDsOFVcAOWvVK8FXBBTyRLGXmHBMKPIOennKX7ECqsNkeJYSo/?=
	=?iso-8859-1?q?S1exW/Ky4FWusnyv2FHMTQv865+kX8hXt4kOEEWBpk2vI5GTK+3Uy4qTXJcE?=
	=?iso-8859-1?q?fBaT5IW8/74pgr96Uq/0MYugPj6MTDzlr1+hawGYAZ9qcN9w2XgaqT7gcz51?=
	=?iso-8859-1?q?uID3I03q0VI3LC3Q55ylJUKeEaYot9LBoaiHTbMM2xyqGbrEJtqCpG4Dbyh8?=
	=?iso-8859-1?q?0z1knNsTgjS/IKehirFFU+82DNmit1yalP2oG7l6EvozYuwMgv0Sg9cCiR3/?=
	=?iso-8859-1?q?IWFr1ahgY2TotLfCplTYFol0WkV32BzHFW2JiMP/I7fCoOvsL2xX+G5tfAIC?=
	=?iso-8859-1?q?RImSLZ/HOJx9sCNFmJtM45ZdGKnDNdAbyhKUVj5D//bFWH014ih8APo+OSeF?=
	=?iso-8859-1?q?NZtNaMssc5jZzilN0ENCkBuUN+bf2xrKqROjP6OIdqboGPH5HkfdW5rwIamH?=
	=?iso-8859-1?q?i1pvG/4TGjH1rv0+ASN5yechqDin2U2xj6z/YSDkHT9KG4vS/JBWa9ESAhCU?=
	=?iso-8859-1?q?vHgw4mhVEvt+xFIoNc9pyzyyU7fTTLrHt9eRUugJ19yh9ozr13XrLor4EJdV?=
	=?iso-8859-1?q?wVLpuEv5Kw4+dqQepj51UcWG2x9mlNvg4e4vwtZ6xz32nYW9XijApKKaFzKA?=
	=?iso-8859-1?q?Fp93FbCLEWLWCV5GjFT0mCp4heG8zwvxCe62WLhGgDZ3/w3QtbMchh/cyrVa?=
	=?iso-8859-1?q?V9NZv3mVRaKNfppKjI+f/EypVHtLpurYD0/YYuQ9zH4fMbUrmBGTa8ub23Xg?=
	=?iso-8859-1?q?Xo/48PX3vZYS59bvYgi/CdthQM8TQ3PletiYlqJ/8bXjc75S5ioUuh7ORkWi?=
	=?iso-8859-1?q?RMhXCaGSXWYMUasKdsMSGwNowBK7rvkcAVW3sCdaoM5m/1UAMsOj7MUG6iWV?=
	=?iso-8859-1?q?Nei4cohuP+7Y1F9DNB63jeZCyh1D+D3c83nm1QH7/3EsQY5XrOiyGwjYlRuo?=
	=?iso-8859-1?q?LbfgJxqzRGyQelyyoyJOLuHWsRD2Tqg1pEUJoPm8EUh4c1v3TFK90nn6mMh0?=
	=?iso-8859-1?q?VJNwJhLLS+vS/rDGK2tFVrTgnNvBYuRoAqbcLCvOAbcd92QvDorMReQ6HlwK?=
	=?iso-8859-1?q?rnAogjYkJIxUljFaNSB29u96LGMVnoY3c78L6IFZdnBNbkl1nH843vZbFeSR?=
	=?iso-8859-1?q?Zpjh4se3kWBTThk9zrnhcGA7b98tgNfs/Q/nNNP9EeeA328n/WsbW7Qmw2xZ?=
	=?iso-8859-1?q?gIg2z9WUAQzDGiGv6FWPEzQWz7zjKdg36jvOtVWLibRjFv2SzB6YoCeCnLBZ?=
	=?iso-8859-1?q?3mZ2gFNJMlvF6XflQvmiXdlPvlokgXuwmiaa/ewUuqCe1wdKWYHVFa5Qt/gF?=
	=?iso-8859-1?q?oYb5NENukVB1VyBpPexAT+SgTfks1jzWVwLcrGU1dzDuJCdPy08TGt8GeBBk?=
	=?iso-8859-1?q?CHaMv6tslRMozctQZ5k5OzSqIG8j41Uhbz1ORLy+fV61+tbam5Q9q9UNteQY?=
	=?iso-8859-1?q?yziRwox+iynXjr1CGcxLv+zT2Aj1filsqkO+cpgCfHymZBhC7iyhOPKP6zm2?=
	=?iso-8859-1?q?xZLeppjqyOUIQ+xsFgi4dhJzmuBOLzqi5BJOySh1RL/+FN5VjO8nWnDBaa6p?=
	=?iso-8859-1?q?cA2anwAb7fNc+h8sXogeTe6y8clwncDuOf62+YA=3D=3D?=
MIME-Version: 1.0
X-OriginatorOrg: oracle.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-AuthSource: SN6PR10MB3022.namprd10.prod.outlook.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 3579d67e-0651-425d-800d-08da9040d832
X-MS-Exchange-CrossTenant-originalarrivaltime: 06 Sep 2022 19:48:52.1628
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 4e2c6054-71cb-48f1-bd6c-3a9705aca71b
X-MS-Exchange-CrossTenant-mailboxtype: HOSTED
X-MS-Exchange-CrossTenant-userprincipalname: 
 A6gYt9l+1I7wldOFgINL8EjLuD8DGfMXpMt230mrN0w8/wBq+5teOG1KlDzhHddTvNWTvgIJFCE93KJCGyt9Gw==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: SJ0PR10MB4670
X-Proofpoint-Virus-Version: vendor=baseguard
 engine=ICAP:2.0.205,Aquarius:18.0.895,Hydra:6.0.528,FMLib:17.11.122.1
 definitions=2022-09-06_09,2022-09-06_02,2022-06-22_01
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0 adultscore=0
 phishscore=0 spamscore=0
 mlxlogscore=999 mlxscore=0 bulkscore=0 malwarescore=0 suspectscore=0
 classifier=spam adjust=0 reason=mlx scancount=1 engine=8.12.0-2207270000
 definitions=main-2209060091
X-Proofpoint-ORIG-GUID: PcCACN5u8Qdj2SW3UsOBC8YQGjQFadvS
X-Proofpoint-GUID: PcCACN5u8Qdj2SW3UsOBC8YQGjQFadvS
ARC-Message-Signature: i=2; a=rsa-sha256; c=relaxed/relaxed;
 d=hostedemail.com;
	s=arc-20220608; t=1662493745;
	h=from:from:sender:reply-to:subject:subject:date:date:
	 message-id:message-id:to:to:cc:cc:mime-version:mime-version:
	 content-type:content-type:
	 content-transfer-encoding:content-transfer-encoding:
	 in-reply-to:in-reply-to:references:references:dkim-signature;
	bh=1X73abYCSHfmiTYUnHvgH/HGa3HR3FhkVaBYugW90ms=;
	b=gQ9qf1IHlukFEqZOBtrSwOpDEqJ0I4N01HJ+BZ+uA7saWP4eZDKBsjU/9ssoiUAy70G8T5
	k6K19hL/doKeUpCEfyzbjaFjZAvJ84ZZ7ZxqoC+E0fG0dHPAQuPEDdX/FLx8qkK2XoIlce
	Bgu3UqJKRTMQEdENLgbOoGxkwNnDvdc=
ARC-Authentication-Results: i=2;
	imf01.hostedemail.com;
	dkim=pass header.d=oracle.com header.s=corp-2022-7-12 header.b=jKnD4GHl;
	dkim=pass header.d=oracle.onmicrosoft.com
 header.s=selector2-oracle-onmicrosoft-com header.b="REMO6+/O";
	arc=pass ("microsoft.com:s=arcselector9901:i=1");
	spf=pass (imf01.hostedemail.com: domain of liam.howlett@oracle.com designates
 205.220.165.32 as permitted sender) smtp.mailfrom=liam.howlett@oracle.com;
	dmarc=pass (policy=none) header.from=oracle.com
ARC-Seal: i=2; s=arc-20220608; d=hostedemail.com; t=1662493745; a=rsa-sha256;
	cv=pass;
	b=VVn9EPdc/Aqsg2EPHqEYQShI1PB5uQyZ8A7ZzAvleEejjt7HOofM4PKKIheafUKQZ7/dQh
	O1mtNm0bilk5lxCH4rCQnZkuDoMN0gFIQ8GhANn9Uz/w3UaG2/OIOkud2VSwD2akxvjtm/
	e7iYgmTzqThgm3bedxeNSUcjfWQTUUo=
X-Rspamd-Queue-Id: 589124006A
Authentication-Results: imf01.hostedemail.com;
	dkim=pass header.d=oracle.com header.s=corp-2022-7-12 header.b=jKnD4GHl;
	dkim=pass header.d=oracle.onmicrosoft.com
 header.s=selector2-oracle-onmicrosoft-com header.b="REMO6+/O";
	arc=pass ("microsoft.com:s=arcselector9901:i=1");
	spf=pass (imf01.hostedemail.com: domain of liam.howlett@oracle.com designates
 205.220.165.32 as permitted sender) smtp.mailfrom=liam.howlett@oracle.com;
	dmarc=pass (policy=none) header.from=oracle.com
X-Rspamd-Server: rspam02
X-Rspam-User: 
X-Stat-Signature: ymowosc8rxmntpn9n5dk8yxitowfu6rb
X-HE-Tag: 1662493745-694367
X-Bogosity: Ham, tests=bogofilter, spamicity=0.000000, version=1.2.4
Sender: owner-linux-mm@kvack.org
Precedence: bulk
X-Loop: owner-majordomo@kvack.org
List-ID: <linux-mm.kvack.org>

From: "Liam R. Howlett" <Liam.Howlett@Oracle.com>

Relocation of code for the next commit.  There should be no changes here.

Signed-off-by: Liam R. Howlett <Liam.Howlett@Oracle.com>
---
 mm/mmap.c | 490 +++++++++++++++++++++++++++---------------------------
 1 file changed, 245 insertions(+), 245 deletions(-)

diff --git a/mm/mmap.c b/mm/mmap.c
index 7872642e8993..8c9e526994be 100644
--- a/mm/mmap.c
+++ b/mm/mmap.c
@@ -1720,251 +1720,6 @@ static inline int accountable_mapping(struct file *file, vm_flags_t vm_flags)
 	return (vm_flags & (VM_NORESERVE | VM_SHARED | VM_WRITE)) == VM_WRITE;
 }
 
-unsigned long mmap_region(struct file *file, unsigned long addr,
-		unsigned long len, vm_flags_t vm_flags, unsigned long pgoff,
-		struct list_head *uf)
-{
-	struct mm_struct *mm = current->mm;
-	struct vm_area_struct *vma = NULL;
-	struct vm_area_struct *next, *prev, *merge;
-	pgoff_t pglen = len >> PAGE_SHIFT;
-	unsigned long charged = 0;
-	unsigned long end = addr + len;
-	unsigned long merge_start = addr, merge_end = end;
-	pgoff_t vm_pgoff;
-	int error;
-	MA_STATE(mas, &mm->mm_mt, addr, end - 1);
-
-	/* Check against address space limit. */
-	if (!may_expand_vm(mm, vm_flags, len >> PAGE_SHIFT)) {
-		unsigned long nr_pages;
-
-		/*
-		 * MAP_FIXED may remove pages of mappings that intersects with
-		 * requested mapping. Account for the pages it would unmap.
-		 */
-		nr_pages = count_vma_pages_range(mm, addr, end);
-
-		if (!may_expand_vm(mm, vm_flags,
-					(len >> PAGE_SHIFT) - nr_pages))
-			return -ENOMEM;
-	}
-
-	/* Unmap any existing mapping in the area */
-	if (do_munmap(mm, addr, len, uf))
-		return -ENOMEM;
-
-	/*
-	 * Private writable mapping: check memory availability
-	 */
-	if (accountable_mapping(file, vm_flags)) {
-		charged = len >> PAGE_SHIFT;
-		if (security_vm_enough_memory_mm(mm, charged))
-			return -ENOMEM;
-		vm_flags |= VM_ACCOUNT;
-	}
-
-	next = mas_next(&mas, ULONG_MAX);
-	prev = mas_prev(&mas, 0);
-	if (vm_flags & VM_SPECIAL)
-		goto cannot_expand;
-
-	/* Attempt to expand an old mapping */
-	/* Check next */
-	if (next && next->vm_start == end && !vma_policy(next) &&
-	    can_vma_merge_before(next, vm_flags, NULL, file, pgoff+pglen,
-				 NULL_VM_UFFD_CTX, NULL)) {
-		merge_end = next->vm_end;
-		vma = next;
-		vm_pgoff = next->vm_pgoff - pglen;
-	}
-
-	/* Check prev */
-	if (prev && prev->vm_end == addr && !vma_policy(prev) &&
-	    (vma ? can_vma_merge_after(prev, vm_flags, vma->anon_vma, file,
-				       pgoff, vma->vm_userfaultfd_ctx, NULL) :
-		   can_vma_merge_after(prev, vm_flags, NULL, file, pgoff,
-				       NULL_VM_UFFD_CTX, NULL))) {
-		merge_start = prev->vm_start;
-		vma = prev;
-		vm_pgoff = prev->vm_pgoff;
-	}
-
-
-	/* Actually expand, if possible */
-	if (vma &&
-	    !vma_expand(&mas, vma, merge_start, merge_end, vm_pgoff, next)) {
-		khugepaged_enter_vma(vma, vm_flags);
-		goto expanded;
-	}
-
-	mas.index = addr;
-	mas.last = end - 1;
-cannot_expand:
-	/*
-	 * Determine the object being mapped and call the appropriate
-	 * specific mapper. the address has already been validated, but
-	 * not unmapped, but the maps are removed from the list.
-	 */
-	vma = vm_area_alloc(mm);
-	if (!vma) {
-		error = -ENOMEM;
-		goto unacct_error;
-	}
-
-	vma->vm_start = addr;
-	vma->vm_end = end;
-	vma->vm_flags = vm_flags;
-	vma->vm_page_prot = vm_get_page_prot(vm_flags);
-	vma->vm_pgoff = pgoff;
-
-	if (file) {
-		if (vm_flags & VM_SHARED) {
-			error = mapping_map_writable(file->f_mapping);
-			if (error)
-				goto free_vma;
-		}
-
-		vma->vm_file = get_file(file);
-		error = call_mmap(file, vma);
-		if (error)
-			goto unmap_and_free_vma;
-
-		/* Can addr have changed??
-		 *
-		 * Answer: Yes, several device drivers can do it in their
-		 *         f_op->mmap method. -DaveM
-		 */
-		WARN_ON_ONCE(addr != vma->vm_start);
-
-		addr = vma->vm_start;
-		mas_reset(&mas);
-
-		/*
-		 * If vm_flags changed after call_mmap(), we should try merge
-		 * vma again as we may succeed this time.
-		 */
-		if (unlikely(vm_flags != vma->vm_flags && prev)) {
-			merge = vma_merge(mm, prev, vma->vm_start, vma->vm_end, vma->vm_flags,
-				NULL, vma->vm_file, vma->vm_pgoff, NULL, NULL_VM_UFFD_CTX, NULL);
-			if (merge) {
-				/*
-				 * ->mmap() can change vma->vm_file and fput
-				 * the original file. So fput the vma->vm_file
-				 * here or we would add an extra fput for file
-				 * and cause general protection fault
-				 * ultimately.
-				 */
-				fput(vma->vm_file);
-				vm_area_free(vma);
-				vma = merge;
-				/* Update vm_flags to pick up the change. */
-				addr = vma->vm_start;
-				vm_flags = vma->vm_flags;
-				goto unmap_writable;
-			}
-		}
-
-		vm_flags = vma->vm_flags;
-	} else if (vm_flags & VM_SHARED) {
-		error = shmem_zero_setup(vma);
-		if (error)
-			goto free_vma;
-	} else {
-		vma_set_anonymous(vma);
-	}
-
-	/* Allow architectures to sanity-check the vm_flags */
-	if (!arch_validate_flags(vma->vm_flags)) {
-		error = -EINVAL;
-		if (file)
-			goto unmap_and_free_vma;
-		else
-			goto free_vma;
-	}
-
-	if (mas_preallocate(&mas, vma, GFP_KERNEL)) {
-		error = -ENOMEM;
-		if (file)
-			goto unmap_and_free_vma;
-		else
-			goto free_vma;
-	}
-
-	if (vma->vm_file)
-		i_mmap_lock_write(vma->vm_file->f_mapping);
-
-	vma_mas_store(vma, &mas);
-	__vma_link_list(mm, vma, prev);
-	mm->map_count++;
-	if (vma->vm_file) {
-		if (vma->vm_flags & VM_SHARED)
-			mapping_allow_writable(vma->vm_file->f_mapping);
-
-		flush_dcache_mmap_lock(vma->vm_file->f_mapping);
-		vma_interval_tree_insert(vma, &vma->vm_file->f_mapping->i_mmap);
-		flush_dcache_mmap_unlock(vma->vm_file->f_mapping);
-		i_mmap_unlock_write(vma->vm_file->f_mapping);
-	}
-
-	/*
-	 * vma_merge() calls khugepaged_enter_vma() either, the below
-	 * call covers the non-merge case.
-	 */
-	khugepaged_enter_vma(vma, vma->vm_flags);
-
-	/* Once vma denies write, undo our temporary denial count */
-unmap_writable:
-	if (file && vm_flags & VM_SHARED)
-		mapping_unmap_writable(file->f_mapping);
-	file = vma->vm_file;
-expanded:
-	perf_event_mmap(vma);
-
-	vm_stat_account(mm, vm_flags, len >> PAGE_SHIFT);
-	if (vm_flags & VM_LOCKED) {
-		if ((vm_flags & VM_SPECIAL) || vma_is_dax(vma) ||
-					is_vm_hugetlb_page(vma) ||
-					vma == get_gate_vma(current->mm))
-			vma->vm_flags &= VM_LOCKED_CLEAR_MASK;
-		else
-			mm->locked_vm += (len >> PAGE_SHIFT);
-	}
-
-	if (file)
-		uprobe_mmap(vma);
-
-	/*
-	 * New (or expanded) vma always get soft dirty status.
-	 * Otherwise user-space soft-dirty page tracker won't
-	 * be able to distinguish situation when vma area unmapped,
-	 * then new mapped in-place (which must be aimed as
-	 * a completely new data area).
-	 */
-	vma->vm_flags |= VM_SOFTDIRTY;
-
-	vma_set_page_prot(vma);
-
-	validate_mm(mm);
-	return addr;
-
-unmap_and_free_vma:
-	fput(vma->vm_file);
-	vma->vm_file = NULL;
-
-	/* Undo any partial mapping done by a device driver. */
-	unmap_region(mm, vma, prev, vma->vm_start, vma->vm_end);
-	if (vm_flags & VM_SHARED)
-		mapping_unmap_writable(file->f_mapping);
-free_vma:
-	vm_area_free(vma);
-unacct_error:
-	if (charged)
-		vm_unacct_memory(charged);
-	validate_mm(mm);
-	return error;
-}
-
 /**
  * unmapped_area() - Find an area between the low_limit and the high_limit with
  * the correct alignment and offset, all from @info. Note: current->mm is used
@@ -2840,6 +2595,251 @@ int do_munmap(struct mm_struct *mm, unsigned long start, size_t len,
 	return __do_munmap(mm, start, len, uf, false);
 }
 
+unsigned long mmap_region(struct file *file, unsigned long addr,
+		unsigned long len, vm_flags_t vm_flags, unsigned long pgoff,
+		struct list_head *uf)
+{
+	struct mm_struct *mm = current->mm;
+	struct vm_area_struct *vma = NULL;
+	struct vm_area_struct *next, *prev, *merge;
+	pgoff_t pglen = len >> PAGE_SHIFT;
+	unsigned long charged = 0;
+	unsigned long end = addr + len;
+	unsigned long merge_start = addr, merge_end = end;
+	pgoff_t vm_pgoff;
+	int error;
+	MA_STATE(mas, &mm->mm_mt, addr, end - 1);
+
+	/* Check against address space limit. */
+	if (!may_expand_vm(mm, vm_flags, len >> PAGE_SHIFT)) {
+		unsigned long nr_pages;
+
+		/*
+		 * MAP_FIXED may remove pages of mappings that intersects with
+		 * requested mapping. Account for the pages it would unmap.
+		 */
+		nr_pages = count_vma_pages_range(mm, addr, end);
+
+		if (!may_expand_vm(mm, vm_flags,
+					(len >> PAGE_SHIFT) - nr_pages))
+			return -ENOMEM;
+	}
+
+	/* Unmap any existing mapping in the area */
+	if (do_munmap(mm, addr, len, uf))
+		return -ENOMEM;
+
+	/*
+	 * Private writable mapping: check memory availability
+	 */
+	if (accountable_mapping(file, vm_flags)) {
+		charged = len >> PAGE_SHIFT;
+		if (security_vm_enough_memory_mm(mm, charged))
+			return -ENOMEM;
+		vm_flags |= VM_ACCOUNT;
+	}
+
+	next = mas_next(&mas, ULONG_MAX);
+	prev = mas_prev(&mas, 0);
+	if (vm_flags & VM_SPECIAL)
+		goto cannot_expand;
+
+	/* Attempt to expand an old mapping */
+	/* Check next */
+	if (next && next->vm_start == end && !vma_policy(next) &&
+	    can_vma_merge_before(next, vm_flags, NULL, file, pgoff+pglen,
+				 NULL_VM_UFFD_CTX, NULL)) {
+		merge_end = next->vm_end;
+		vma = next;
+		vm_pgoff = next->vm_pgoff - pglen;
+	}
+
+	/* Check prev */
+	if (prev && prev->vm_end == addr && !vma_policy(prev) &&
+	    (vma ? can_vma_merge_after(prev, vm_flags, vma->anon_vma, file,
+				       pgoff, vma->vm_userfaultfd_ctx, NULL) :
+		   can_vma_merge_after(prev, vm_flags, NULL, file, pgoff,
+				       NULL_VM_UFFD_CTX, NULL))) {
+		merge_start = prev->vm_start;
+		vma = prev;
+		vm_pgoff = prev->vm_pgoff;
+	}
+
+
+	/* Actually expand, if possible */
+	if (vma &&
+	    !vma_expand(&mas, vma, merge_start, merge_end, vm_pgoff, next)) {
+		khugepaged_enter_vma(vma, vm_flags);
+		goto expanded;
+	}
+
+	mas.index = addr;
+	mas.last = end - 1;
+cannot_expand:
+	/*
+	 * Determine the object being mapped and call the appropriate
+	 * specific mapper. the address has already been validated, but
+	 * not unmapped, but the maps are removed from the list.
+	 */
+	vma = vm_area_alloc(mm);
+	if (!vma) {
+		error = -ENOMEM;
+		goto unacct_error;
+	}
+
+	vma->vm_start = addr;
+	vma->vm_end = end;
+	vma->vm_flags = vm_flags;
+	vma->vm_page_prot = vm_get_page_prot(vm_flags);
+	vma->vm_pgoff = pgoff;
+
+	if (file) {
+		if (vm_flags & VM_SHARED) {
+			error = mapping_map_writable(file->f_mapping);
+			if (error)
+				goto free_vma;
+		}
+
+		vma->vm_file = get_file(file);
+		error = call_mmap(file, vma);
+		if (error)
+			goto unmap_and_free_vma;
+
+		/* Can addr have changed??
+		 *
+		 * Answer: Yes, several device drivers can do it in their
+		 *         f_op->mmap method. -DaveM
+		 */
+		WARN_ON_ONCE(addr != vma->vm_start);
+
+		addr = vma->vm_start;
+		mas_reset(&mas);
+
+		/*
+		 * If vm_flags changed after call_mmap(), we should try merge
+		 * vma again as we may succeed this time.
+		 */
+		if (unlikely(vm_flags != vma->vm_flags && prev)) {
+			merge = vma_merge(mm, prev, vma->vm_start, vma->vm_end, vma->vm_flags,
+				NULL, vma->vm_file, vma->vm_pgoff, NULL, NULL_VM_UFFD_CTX, NULL);
+			if (merge) {
+				/*
+				 * ->mmap() can change vma->vm_file and fput
+				 * the original file. So fput the vma->vm_file
+				 * here or we would add an extra fput for file
+				 * and cause general protection fault
+				 * ultimately.
+				 */
+				fput(vma->vm_file);
+				vm_area_free(vma);
+				vma = merge;
+				/* Update vm_flags to pick up the change. */
+				addr = vma->vm_start;
+				vm_flags = vma->vm_flags;
+				goto unmap_writable;
+			}
+		}
+
+		vm_flags = vma->vm_flags;
+	} else if (vm_flags & VM_SHARED) {
+		error = shmem_zero_setup(vma);
+		if (error)
+			goto free_vma;
+	} else {
+		vma_set_anonymous(vma);
+	}
+
+	/* Allow architectures to sanity-check the vm_flags */
+	if (!arch_validate_flags(vma->vm_flags)) {
+		error = -EINVAL;
+		if (file)
+			goto unmap_and_free_vma;
+		else
+			goto free_vma;
+	}
+
+	if (mas_preallocate(&mas, vma, GFP_KERNEL)) {
+		error = -ENOMEM;
+		if (file)
+			goto unmap_and_free_vma;
+		else
+			goto free_vma;
+	}
+
+	if (vma->vm_file)
+		i_mmap_lock_write(vma->vm_file->f_mapping);
+
+	vma_mas_store(vma, &mas);
+	__vma_link_list(mm, vma, prev);
+	mm->map_count++;
+	if (vma->vm_file) {
+		if (vma->vm_flags & VM_SHARED)
+			mapping_allow_writable(vma->vm_file->f_mapping);
+
+		flush_dcache_mmap_lock(vma->vm_file->f_mapping);
+		vma_interval_tree_insert(vma, &vma->vm_file->f_mapping->i_mmap);
+		flush_dcache_mmap_unlock(vma->vm_file->f_mapping);
+		i_mmap_unlock_write(vma->vm_file->f_mapping);
+	}
+
+	/*
+	 * vma_merge() calls khugepaged_enter_vma() either, the below
+	 * call covers the non-merge case.
+	 */
+	khugepaged_enter_vma(vma, vma->vm_flags);
+
+	/* Once vma denies write, undo our temporary denial count */
+unmap_writable:
+	if (file && vm_flags & VM_SHARED)
+		mapping_unmap_writable(file->f_mapping);
+	file = vma->vm_file;
+expanded:
+	perf_event_mmap(vma);
+
+	vm_stat_account(mm, vm_flags, len >> PAGE_SHIFT);
+	if (vm_flags & VM_LOCKED) {
+		if ((vm_flags & VM_SPECIAL) || vma_is_dax(vma) ||
+					is_vm_hugetlb_page(vma) ||
+					vma == get_gate_vma(current->mm))
+			vma->vm_flags &= VM_LOCKED_CLEAR_MASK;
+		else
+			mm->locked_vm += (len >> PAGE_SHIFT);
+	}
+
+	if (file)
+		uprobe_mmap(vma);
+
+	/*
+	 * New (or expanded) vma always get soft dirty status.
+	 * Otherwise user-space soft-dirty page tracker won't
+	 * be able to distinguish situation when vma area unmapped,
+	 * then new mapped in-place (which must be aimed as
+	 * a completely new data area).
+	 */
+	vma->vm_flags |= VM_SOFTDIRTY;
+
+	vma_set_page_prot(vma);
+
+	validate_mm(mm);
+	return addr;
+
+unmap_and_free_vma:
+	fput(vma->vm_file);
+	vma->vm_file = NULL;
+
+	/* Undo any partial mapping done by a device driver. */
+	unmap_region(mm, vma, prev, vma->vm_start, vma->vm_end);
+	if (vm_flags & VM_SHARED)
+		mapping_unmap_writable(file->f_mapping);
+free_vma:
+	vm_area_free(vma);
+unacct_error:
+	if (charged)
+		vm_unacct_memory(charged);
+	validate_mm(mm);
+	return error;
+}
+
 static int __vm_munmap(unsigned long start, size_t len, bool downgrade)
 {
 	int ret;

