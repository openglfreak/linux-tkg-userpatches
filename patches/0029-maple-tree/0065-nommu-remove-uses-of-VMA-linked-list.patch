From patchwork Wed Jul 20 02:18:03 2022
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Liam Howlett <Liam.Howlett@Oracle.com>
X-Patchwork-Id: 12923279
Return-Path: <owner-linux-mm@kvack.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from kanga.kvack.org (kanga.kvack.org [205.233.56.17])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 9B9EDCCA485
	for <linux-mm@archiver.kernel.org>; Wed, 20 Jul 2022 02:19:32 +0000 (UTC)
Received: by kanga.kvack.org (Postfix)
	id 1AB598E0001; Tue, 19 Jul 2022 22:19:26 -0400 (EDT)
Received: by kanga.kvack.org (Postfix, from userid 40)
	id 15C276B0083; Tue, 19 Jul 2022 22:19:26 -0400 (EDT)
X-Delivered-To: int-list-linux-mm@kvack.org
Received: by kanga.kvack.org (Postfix, from userid 63042)
	id D6A4B8E0001; Tue, 19 Jul 2022 22:19:25 -0400 (EDT)
X-Delivered-To: linux-mm@kvack.org
Received: from relay.hostedemail.com (smtprelay0015.hostedemail.com
 [216.40.44.15])
	by kanga.kvack.org (Postfix) with ESMTP id C5D7A6B0081
	for <linux-mm@kvack.org>; Tue, 19 Jul 2022 22:19:25 -0400 (EDT)
Received: from smtpin28.hostedemail.com (a10.router.float.18 [10.200.18.1])
	by unirelay02.hostedemail.com (Postfix) with ESMTP id 9F342120439
	for <linux-mm@kvack.org>; Wed, 20 Jul 2022 02:19:25 +0000 (UTC)
X-FDA: 79705871490.28.E9AAF67
Received: from mx0a-00069f02.pphosted.com (mx0a-00069f02.pphosted.com
 [205.220.165.32])
	by imf11.hostedemail.com (Postfix) with ESMTP id 048984000D
	for <linux-mm@kvack.org>; Wed, 20 Jul 2022 02:19:24 +0000 (UTC)
Received: from pps.filterd (m0246627.ppops.net [127.0.0.1])
	by mx0b-00069f02.pphosted.com (8.17.1.5/8.17.1.5) with ESMTP id
 26K119oH017919;
	Wed, 20 Jul 2022 02:19:22 GMT
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=oracle.com;
 h=from : to : cc :
 subject : date : message-id : references : in-reply-to : content-type :
 content-transfer-encoding : mime-version; s=corp-2022-7-12;
 bh=QFFWvjBrVBfXldt27a+R8CiZyZq0yB0Cupd4KyZFQH8=;
 b=DsldPbbYFiHeA0VyAy3gHQICcgB6x5Ou02u9lMyyzVk/xH9NTzAlXjFU7p9UsJEfHNUR
 oaJLgwQRsuqGeJ3DIXJV/VrQNHswDTNRQ0IBB3kOYysmRlghM+IaYB/s117fn+8nZjbJ
 WtufmDswaJHzDmBWfCZehk7uBSkAYSDB01ga4Wyp3A9QuVnmjRb19wVbZ81BdANFMAVR
 kON1R75XJciuTRoS8Ffwli374TLJoi9GVcZBfvdP7ufunUFdjObp7SuesFDSK67Q/liR
 nf7MIJX//XNIiHIT4rhibXFZRFQwOv/1MzcSKiCiQfKdzb1dmowiA9m8F7hEkmFnMrsB tg==
Received: from iadpaimrmta01.imrmtpd1.prodappiadaev1.oraclevcn.com
 (iadpaimrmta01.appoci.oracle.com [130.35.100.223])
	by mx0b-00069f02.pphosted.com (PPS) with ESMTPS id 3hbkx107v3-1
	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=OK);
	Wed, 20 Jul 2022 02:19:22 +0000
Received: from pps.filterd
 (iadpaimrmta01.imrmtpd1.prodappiadaev1.oraclevcn.com [127.0.0.1])
	by iadpaimrmta01.imrmtpd1.prodappiadaev1.oraclevcn.com (8.17.1.5/8.17.1.5)
 with ESMTP id 26K1x7aj007828;
	Wed, 20 Jul 2022 02:19:20 GMT
Received: from nam11-co1-obe.outbound.protection.outlook.com
 (mail-co1nam11lp2177.outbound.protection.outlook.com [104.47.56.177])
	by iadpaimrmta01.imrmtpd1.prodappiadaev1.oraclevcn.com (PPS) with ESMTPS id
 3hc1k3w3uu-2
	(version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=OK);
	Wed, 20 Jul 2022 02:19:20 +0000
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=F0Fe4gc9DoXrsxRuXcCmDD+87QjSSC6i44cd0776jJMRJxHY1yX9uMTBmzt5bV7YOG7Q1TlXH3Hyxo015Nbsnpmll0J2XM3QftzoFN74q0IGDf4rVLdo+rUNF+Z7riybNqyClYPtPgZ36y5a6tksVRE/8arVP2V2vAA799WJ5bDqMQtfWx5V18iYlI7rUJumzT68nlOcL7YwDGLy92I424kLh9qFMzpiAU6aiadptTzJcCHoDuZ5oDfOBFCJgV6LVM1/xYT5GAB/5HMOlveb/IX8AWgzK4pBHSQaQOQwvUujuBrhe+7+WejRk0HapDx/dJ8GVGzIes473ezj6T0D8w==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=QFFWvjBrVBfXldt27a+R8CiZyZq0yB0Cupd4KyZFQH8=;
 b=nTNbA+7WiHK/BAaVYtqXFXytqU05O/AwR5hPSQ/uIL2MYhgpJLiSv/SkUGQsbeMmLXOnfTjdeL4Lp7+gBlUMvI8T9gLEqNZFlMf09CygzqejTKu5ef9/jtEjUpKd7T/yAld3c/FR3rAVjY6w+x41Rq7TGx7vi+AVHGke0HqFBfje/lDvwBXA5wnMtfxIiJ37pyF0NdJOoYRnufeXlZs/MBtPnQDN9wN4Bu1RWBzfGAyTVjUzArcjwXklD+5m5nd9K9JxGLsis0D1SMoeb3Dj1SAIYf2HdC+EvY60azfFYCLUD9QX+EqLt0E6naWH6cn0caWDS0oe2sxy5DoVMPW2BQ==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=oracle.com; dmarc=pass action=none header.from=oracle.com;
 dkim=pass header.d=oracle.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=oracle.onmicrosoft.com; s=selector2-oracle-onmicrosoft-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=QFFWvjBrVBfXldt27a+R8CiZyZq0yB0Cupd4KyZFQH8=;
 b=VXvLo0yliW0qDCDHkkFOIHVpGwK8duvzHJxy+CTD48db1ulebJg+DJhCfs3S3I7slgzkpucNcMMn1CNlUAktm51hDkPtEDpMQIBFn27hSk7IYH9k0EyjDE180WL119bGFazGtEfcHT7I45/7HO5tR62HlY9UrmMXRKPDj9PD9rw=
Received: from SN6PR10MB3022.namprd10.prod.outlook.com (2603:10b6:805:d8::25)
 by CH2PR10MB3797.namprd10.prod.outlook.com (2603:10b6:610:6::11) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.5438.14; Wed, 20 Jul
 2022 02:19:18 +0000
Received: from SN6PR10MB3022.namprd10.prod.outlook.com
 ([fe80::c4d1:edc3:7d21:7c68]) by SN6PR10MB3022.namprd10.prod.outlook.com
 ([fe80::c4d1:edc3:7d21:7c68%6]) with mapi id 15.20.5438.024; Wed, 20 Jul 2022
 02:19:18 +0000
From: Liam Howlett <liam.howlett@oracle.com>
To: "maple-tree@lists.infradead.org" <maple-tree@lists.infradead.org>,
        "linux-mm@kvack.org" <linux-mm@kvack.org>,
        "linux-kernel@vger.kernel.org"
	<linux-kernel@vger.kernel.org>,
        Andrew Morton <akpm@linux-foundation.org>,
        Hugh Dickins <hughd@google.com>
CC: Yu Zhao <yuzhao@google.com>
Subject: [PATCH v12 65/69] nommu: remove uses of VMA linked list
Thread-Topic: [PATCH v12 65/69] nommu: remove uses of VMA linked list
Thread-Index: AQHYm97xn6jWqBizAkKk6+P9Vw0tfA==
Date: Wed, 20 Jul 2022 02:18:03 +0000
Message-ID: <20220720021727.17018-66-Liam.Howlett@oracle.com>
References: <20220720021727.17018-1-Liam.Howlett@oracle.com>
In-Reply-To: <20220720021727.17018-1-Liam.Howlett@oracle.com>
Accept-Language: en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-mailer: git-send-email 2.35.1
x-ms-publictraffictype: Email
x-ms-office365-filtering-correlation-id: 849fb0e8-3700-4fa6-9493-08da69f63fdc
x-ms-traffictypediagnostic: CH2PR10MB3797:EE_
x-ms-exchange-senderadcheck: 1
x-ms-exchange-antispam-relay: 0
x-microsoft-antispam: BCL:0;
x-microsoft-antispam-message-info: 
 7kqCB7Kl046soxUsATSNFwEJxDAiiJJXcB6g72n3AoU/fL5P+ftfAaXDpbfvL6HCxShWH2RZK9b7I4EzdAyfheZJQYVYZIRdmTTmVB2CZ1VpGd5yMks4ZL38U0DlxwHzfjX3hVrBEVPnc/Lqiw19v4lMxMMJXtbw0vWyF2lMcXgrv0//5hyBEQCefJjDYmrjspvA4+FiBnzIx0iYpgHLIebstnVB4oAb/HQhRbu2dBIkWrYzcncdutq9mnS9xAMKaUg2dGWyxU4Q9jqFM/2wp3qNGxop+m/eKRRSU6I6Z2dO6tPxTlE5wQo/NRjTJz0CAKd12m/PM03wcdxHeUIDkadSC7QngjNOvGkuauNyhtrRjNdT9+A0yEkFF2KftYmI2GoFdzQdzy3hOeOgoj+3ekO5Ed++AOcisrL7RzaKYRBk7+4f9CDsyRapn5HsTUoGyspeo5OZj829z4JsVjobiFwrmD19AYtGrdZxTkpL3f8+rEmvX1UUqUNVvkOwjmMr8lDmMsmEQ3u/MpA/RZPKX6AYYBotPiyErQz6pnSWFcPNwjFhnvYC7V+gbDRHAu4G5A1hHpBFmYPVy0LZzU6CcxSNUO6Wue/Gx93O3Fj2dsnqXepXJ1B0lKiv1GeRA751ZDClJbTzyRkpAC/GD3WEok0xNORa2YRlzlXx0z8D0qkv8kPngdoxLApF1xpMjFw8G1rvtbK141FtD2BU/sCyYyngcvnQIcBqd+EBuBux30dQaViDIL8+FjnTRfXlkuX8oiN5dtoz0uiq1TURtMzP3Dp6fDTj1K98hIOBXiuZwXqf9Ed6WjhdNMgNOo4pcm+56EDWGBVM4OtPs8uzBnvpb0c0pEMdw5K8B5S05MSoGCkGHqY4VW/LcmiUku/1o1Lb
x-forefront-antispam-report: 
 CIP:255.255.255.255;CTRY:;LANG:en;SCL:1;SRV:;IPV:NLI;SFV:NSPM;H:SN6PR10MB3022.namprd10.prod.outlook.com;PTR:;CAT:NONE;SFS:(13230016)(366004)(396003)(136003)(376002)(346002)(39860400002)(91956017)(38070700005)(316002)(122000001)(83380400001)(64756008)(66476007)(71200400001)(66556008)(66946007)(76116006)(38100700002)(36756003)(110136005)(8676002)(66446008)(4326008)(6666004)(5660300002)(26005)(6512007)(8936002)(966005)(478600001)(6486002)(44832011)(2906002)(6506007)(41300700001)(2616005)(86362001)(1076003)(186003);DIR:OUT;SFP:1101;
x-ms-exchange-antispam-messagedata-chunkcount: 1
x-ms-exchange-antispam-messagedata-0: =?iso-8859-1?q?+fjZ/B2MEyBj/anaLPtPeLJ?=
	=?iso-8859-1?q?rvvQySgXAk0ti7+73t6Vvfm60Rf9zxd2v0g9ESFMLfEe6SQLujUzOiVOsqYj?=
	=?iso-8859-1?q?0YnawddE7apgteMRvVB6K3ps9XJySEGIQM3E9Unnm8z8vngBMF3krUjJ9kb4?=
	=?iso-8859-1?q?i8Ybl4pvyMW4j9RLUb/ECr0CPmsF1RNlN4l+hZTZUKUZhJjx666ViVtJV0dz?=
	=?iso-8859-1?q?itUU48lfoOUSSR5YQDp593Suq3uKp3V7gsDJIZz727sEORT/9PQnIUuz0Non?=
	=?iso-8859-1?q?ESmWr1VtrcrIg+eA91ZkoBFdq+NlU3vovS23S+TzefijCiOJJXctZDecbUTS?=
	=?iso-8859-1?q?FU0jBX45bveh4roYJVmbPmaVjqlbPv89pfWvStkkrBkSxZq9Ua9p3NV9qqUU?=
	=?iso-8859-1?q?6PdTtQ55mxKtRMN/4YfJa+OAX8ZWI+VrQhaTNJHfualNMr2Co8vxKpfyRPyk?=
	=?iso-8859-1?q?9aEDFpfvL9HRf/6shwTTk8XIW0px+I4t/LV2mPeEV/rKBKhN3RuU5tEF/7nw?=
	=?iso-8859-1?q?KvtwhPlLprIoi7b/oRW72qre3XR+mc3qik2+7Y1ax9CdKe3/DLK5yejtklh3?=
	=?iso-8859-1?q?UVeRFiygEky+yHJApDehsxNp1e7ZxP7Uz56Q8UUOzFVCHbu2rttiQjDdW0Pi?=
	=?iso-8859-1?q?+bnklYe4BDXUKpZKkMQECF7gpLThFZMQn91dAv/s4ajDP0Zc+8Oq0Vyn+DtV?=
	=?iso-8859-1?q?ICSlO696xa1ZklVJw+xXyKZTM5buQPHMnx5pQfSxGI0JXigHD7BWEz+nHV7t?=
	=?iso-8859-1?q?Bw+LAax+f4gaEGC3ZNOitecxCcgFqdof7tF5TzGXfWI9bEQ9M2K3/1Lhe01S?=
	=?iso-8859-1?q?ATO4fZRJVKlgm/X5TFjYpwcfbL2rNjF2pD+MsMNOj2vGi82iHzmQZbi86p2V?=
	=?iso-8859-1?q?gbdpKBEa8EYpN8ZDu3ucITdtyIKIzxuRgKUoeMCbLwvG+Py2LQHjDws8BOH0?=
	=?iso-8859-1?q?S0VQVkklR7fnBGTgKPdlbv37C7zyNNIDVdPUR9q65/+PG9hij03MSStO/jwO?=
	=?iso-8859-1?q?VeQHVMs8khyFjySVJD6ym+S3forWCDR4+XIXOlG1eOi6QWv3labWGAO/dlFL?=
	=?iso-8859-1?q?vfBRNGbEIflRdebrvTfdTDKrPPigz8T3zKlLrbqZBFolpEs9TX4FlT/Ilyqv?=
	=?iso-8859-1?q?U/BH/Cqy1D9jq0YMy1GGeS1Fb48QG6/12ivr4K75LBnEfDnOoB3IkwfEPjmj?=
	=?iso-8859-1?q?HodD/zh85zqj3aQ+IECQMac0x0P4nlObsUhddq3WgeK8+YnXW1FA1ccI9LYt?=
	=?iso-8859-1?q?PL8b6Z1mfmCoVJwMcktapf8Q48cvcm15yxTvkULzggP6t2eBbvVgMsU0OGPu?=
	=?iso-8859-1?q?L4fO+sD/HThNPFnhHtvlnRM1XKAgM1dM2C4j3Ohno4vvPxdDywyBJCHM1Nks?=
	=?iso-8859-1?q?72KPEcSSYWv5ltVLknQh179Qus9Yvii+43MX/3qj2ctv195oPd2y53oDkQru?=
	=?iso-8859-1?q?D1EgBbL5L13q1ag0BeY2V77LhZtIbBA/uIr/TFN0p3ELEsjKQ8zt7et7Q1Sv?=
	=?iso-8859-1?q?PR0EevIVQC2+c1Fbuik32QYrCRgODQmMssKAEI/zMeCU7mOex4f7vTVPYV3Y?=
	=?iso-8859-1?q?zXyvh16eb77inLf1Z4ZfxhqqExt1XstIq9VjxTOtW2uElqwMK2u2yCoFpNlm?=
	=?iso-8859-1?q?gLxKkk/m1/MGA8qndK+JrXikBh30r8/8wViHK0g=3D=3D?=
MIME-Version: 1.0
X-OriginatorOrg: oracle.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-AuthSource: SN6PR10MB3022.namprd10.prod.outlook.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 849fb0e8-3700-4fa6-9493-08da69f63fdc
X-MS-Exchange-CrossTenant-originalarrivaltime: 20 Jul 2022 02:18:03.7735
 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 4e2c6054-71cb-48f1-bd6c-3a9705aca71b
X-MS-Exchange-CrossTenant-mailboxtype: HOSTED
X-MS-Exchange-CrossTenant-userprincipalname: 
 Jw+vDCg39vqoh5/B/pZCk7JLQvtK7zuNowdsiX/LaOJINCt15j+OsdXpkg94EEPCUKFzXXHKK+qUJPbx0YgvMQ==
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CH2PR10MB3797
X-Proofpoint-Virus-Version: vendor=baseguard
 engine=ICAP:2.0.205,Aquarius:18.0.883,Hydra:6.0.517,FMLib:17.11.122.1
 definitions=2022-07-19_10,2022-07-19_01,2022-06-22_01
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0 mlxscore=0
 adultscore=0 phishscore=0
 mlxlogscore=999 spamscore=0 malwarescore=0 bulkscore=0 suspectscore=0
 classifier=spam adjust=0 reason=mlx scancount=1 engine=8.12.0-2206140000
 definitions=main-2207200008
X-Proofpoint-GUID: afTRGoiwUBs8NyA2_HFdToS9Y9es0qem
X-Proofpoint-ORIG-GUID: afTRGoiwUBs8NyA2_HFdToS9Y9es0qem
ARC-Authentication-Results: i=2;
	imf11.hostedemail.com;
	dkim=pass header.d=oracle.com header.s=corp-2022-7-12 header.b=DsldPbbY;
	dkim=pass header.d=oracle.onmicrosoft.com
 header.s=selector2-oracle-onmicrosoft-com header.b=VXvLo0yl;
	dmarc=pass (policy=none) header.from=oracle.com;
	spf=none (imf11.hostedemail.com: domain of liam.howlett@oracle.com has no SPF
 policy when checking 205.220.165.32) smtp.mailfrom=liam.howlett@oracle.com;
	arc=pass ("microsoft.com:s=arcselector9901:i=1")
ARC-Message-Signature: i=2; a=rsa-sha256; c=relaxed/relaxed;
 d=hostedemail.com;
	s=arc-20220608; t=1658283565;
	h=from:from:sender:reply-to:subject:subject:date:date:
	 message-id:message-id:to:to:cc:cc:mime-version:mime-version:
	 content-type:content-type:
	 content-transfer-encoding:content-transfer-encoding:
	 in-reply-to:in-reply-to:references:references:dkim-signature;
	bh=QFFWvjBrVBfXldt27a+R8CiZyZq0yB0Cupd4KyZFQH8=;
	b=SXN5scIbgv7qjJIk7aYVyQ08MZ0wqf9ZaizL84ucXc1X1JLofJ6CAy4ppkyHLX/eO9HmK8
	Li8KLaMmmygUV+85klTz7GnQ8wVQ9L2M8SQ8d+tBu6PHE7kU7dZGgXcrXy9vPefOicVBzU
	fC8wCOMM2vlDFyqA9YQTWzcdtnU5K6g=
ARC-Seal: i=2; s=arc-20220608; d=hostedemail.com; t=1658283565; a=rsa-sha256;
	cv=pass;
	b=JrbHkwpE+vmb0b+TzehLR85YePS/37TG7p5ybrmO0xdkI4P0LLBDw5KzazR7a1tfaDvnuh
	0itDTr6noD2d50pX0VEO9ie1KmsOrKAQ6cDsWm17jaDiGtyb3xLmTL1ogJ4VbJGbqWlnpQ
	mtEwtc3Upng1RmB/zENqUesdlYXAcfM=
X-Stat-Signature: 8rtk5xmihtdfg7ngsqusz1fwpzf8u3mm
X-Rspamd-Queue-Id: 048984000D
X-Rspam-User: 
Authentication-Results: imf11.hostedemail.com;
	dkim=pass header.d=oracle.com header.s=corp-2022-7-12 header.b=DsldPbbY;
	dkim=pass header.d=oracle.onmicrosoft.com
 header.s=selector2-oracle-onmicrosoft-com header.b=VXvLo0yl;
	dmarc=pass (policy=none) header.from=oracle.com;
	spf=none (imf11.hostedemail.com: domain of liam.howlett@oracle.com has no SPF
 policy when checking 205.220.165.32) smtp.mailfrom=liam.howlett@oracle.com;
	arc=pass ("microsoft.com:s=arcselector9901:i=1")
X-Rspamd-Server: rspam11
X-HE-Tag: 1658283564-768360
X-Bogosity: Ham, tests=bogofilter, spamicity=0.000000, version=1.2.4
Sender: owner-linux-mm@kvack.org
Precedence: bulk
X-Loop: owner-majordomo@kvack.org
List-ID: <linux-mm.kvack.org>

From: "Matthew Wilcox (Oracle)" <willy@infradead.org>

Use the maple tree or VMA iterator instead.  This is faster and will allow
us to shrink the VMA.

Link: https://lkml.kernel.org/r/20220504011345.662299-50-Liam.Howlett@oracle.com
Link: https://lkml.kernel.org/r/20220621204632.3370049-66-Liam.Howlett@oracle.com
Signed-off-by: Matthew Wilcox (Oracle) <willy@infradead.org>
Signed-off-by: Liam R. Howlett <Liam.Howlett@Oracle.com>
Acked-by: Vlastimil Babka <vbabka@suse.cz>
Cc: Catalin Marinas <catalin.marinas@arm.com>
Cc: David Howells <dhowells@redhat.com>
Cc: SeongJae Park <sj@kernel.org>
Cc: Will Deacon <will@kernel.org>
Cc: Davidlohr Bueso <dave@stgolabs.net>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
---
 mm/nommu.c | 135 +++++++++++++++++++++++++++++++++++++++--------------
 1 file changed, 101 insertions(+), 34 deletions(-)

diff --git a/mm/nommu.c b/mm/nommu.c
index 111111111..111111111 100644
--- a/mm/nommu.c
+++ b/mm/nommu.c
@@ -557,26 +557,14 @@ void vma_mas_remove(struct vm_area_struct *vma, struct ma_state *mas)
 	mas_store_prealloc(mas, NULL);
 }
 
-/*
- * add a VMA into a process's mm_struct in the appropriate place in the list
- * and tree and add to the address space's page tree also if not an anonymous
- * page
- * - should be called with mm->mmap_lock held writelocked
- */
-static void add_vma_to_mm(struct mm_struct *mm, struct vm_area_struct *vma)
+static void setup_vma_to_mm(struct vm_area_struct *vma, struct mm_struct *mm)
 {
-	struct address_space *mapping;
-	struct vm_area_struct *prev;
-	MA_STATE(mas, &mm->mm_mt, vma->vm_start, vma->vm_end);
-
-	BUG_ON(!vma->vm_region);
-
 	mm->map_count++;
 	vma->vm_mm = mm;
 
 	/* add the VMA to the mapping */
 	if (vma->vm_file) {
-		mapping = vma->vm_file->f_mapping;
+		struct address_space *mapping = vma->vm_file->f_mapping;
 
 		i_mmap_lock_write(mapping);
 		flush_dcache_mmap_lock(mapping);
@@ -584,21 +572,52 @@ static void add_vma_to_mm(struct mm_struct *mm, struct vm_area_struct *vma)
 		flush_dcache_mmap_unlock(mapping);
 		i_mmap_unlock_write(mapping);
 	}
+}
 
-	prev = mas_prev(&mas, 0);
-	mas_reset(&mas);
+/*
+ * mas_add_vma_to_mm() - Maple state variant of add_mas_to_mm().
+ * @mas: The maple state with preallocations.
+ * @mm: The mm_struct
+ * @vma: The vma to add
+ *
+ */
+static void mas_add_vma_to_mm(struct ma_state *mas, struct mm_struct *mm,
+			      struct vm_area_struct *vma)
+{
+	struct vm_area_struct *prev;
+
+	BUG_ON(!vma->vm_region);
+
+	setup_vma_to_mm(vma, mm);
+
+	prev = mas_prev(mas, 0);
+	mas_reset(mas);
 	/* add the VMA to the tree */
-	vma_mas_store(vma, &mas);
+	vma_mas_store(vma, mas);
 	__vma_link_list(mm, vma, prev);
 }
 
 /*
- * delete a VMA from its owning mm_struct and address space
+ * add a VMA into a process's mm_struct in the appropriate place in the list
+ * and tree and add to the address space's page tree also if not an anonymous
+ * page
+ * - should be called with mm->mmap_lock held writelocked
  */
-static void delete_vma_from_mm(struct vm_area_struct *vma)
+static int add_vma_to_mm(struct mm_struct *mm, struct vm_area_struct *vma)
 {
-	MA_STATE(mas, &vma->vm_mm->mm_mt, 0, 0);
+	MA_STATE(mas, &mm->mm_mt, vma->vm_start, vma->vm_end);
+
+	if (mas_preallocate(&mas, vma, GFP_KERNEL)) {
+		pr_warn("Allocation of vma tree for process %d failed\n",
+		       current->pid);
+		return -ENOMEM;
+	}
+	mas_add_vma_to_mm(&mas, mm, vma);
+	return 0;
+}
 
+static void cleanup_vma_from_mm(struct vm_area_struct *vma)
+{
 	vma->vm_mm->map_count--;
 	/* remove the VMA from the mapping */
 	if (vma->vm_file) {
@@ -611,10 +630,25 @@ static void delete_vma_from_mm(struct vm_area_struct *vma)
 		flush_dcache_mmap_unlock(mapping);
 		i_mmap_unlock_write(mapping);
 	}
+}
+/*
+ * delete a VMA from its owning mm_struct and address space
+ */
+static int delete_vma_from_mm(struct vm_area_struct *vma)
+{
+	MA_STATE(mas, &vma->vm_mm->mm_mt, 0, 0);
+
+	if (mas_preallocate(&mas, vma, GFP_KERNEL)) {
+		pr_warn("Allocation of vma tree for process %d failed\n",
+		       current->pid);
+		return -ENOMEM;
+	}
+	cleanup_vma_from_mm(vma);
 
 	/* remove from the MM's tree and list */
 	vma_mas_remove(vma, &mas);
 	__vma_unlink_list(vma->vm_mm, vma);
+	return 0;
 }
 
 /*
@@ -1024,6 +1058,7 @@ unsigned long do_mmap(struct file *file,
 	vm_flags_t vm_flags;
 	unsigned long capabilities, result;
 	int ret;
+	MA_STATE(mas, &current->mm->mm_mt, 0, 0);
 
 	*populate = 0;
 
@@ -1042,6 +1077,7 @@ unsigned long do_mmap(struct file *file,
 	 * now know into VMA flags */
 	vm_flags = determine_vm_flags(file, prot, flags, capabilities);
 
+
 	/* we're going to need to record the mapping */
 	region = kmem_cache_zalloc(vm_region_jar, GFP_KERNEL);
 	if (!region)
@@ -1051,6 +1087,9 @@ unsigned long do_mmap(struct file *file,
 	if (!vma)
 		goto error_getting_vma;
 
+	if (mas_preallocate(&mas, vma, GFP_KERNEL))
+		goto error_maple_preallocate;
+
 	region->vm_usage = 1;
 	region->vm_flags = vm_flags;
 	region->vm_pgoff = pgoff;
@@ -1191,7 +1230,7 @@ unsigned long do_mmap(struct file *file,
 	current->mm->total_vm += len >> PAGE_SHIFT;
 
 share:
-	add_vma_to_mm(current->mm, vma);
+	mas_add_vma_to_mm(&mas, current->mm, vma);
 
 	/* we flush the region from the icache only when the first executable
 	 * mapping of it is made  */
@@ -1217,6 +1256,7 @@ unsigned long do_mmap(struct file *file,
 
 sharing_violation:
 	up_write(&nommu_region_sem);
+	mas_destroy(&mas);
 	pr_warn("Attempt to share mismatched mappings\n");
 	ret = -EINVAL;
 	goto error;
@@ -1233,6 +1273,14 @@ unsigned long do_mmap(struct file *file,
 			len, current->pid);
 	show_free_areas(0, NULL);
 	return -ENOMEM;
+
+error_maple_preallocate:
+	kmem_cache_free(vm_region_jar, region);
+	vm_area_free(vma);
+	pr_warn("Allocation of vma tree for process %d failed\n", current->pid);
+	show_free_areas(0, NULL);
+	return -ENOMEM;
+
 }
 
 unsigned long ksys_mmap_pgoff(unsigned long addr, unsigned long len,
@@ -1298,6 +1346,7 @@ int split_vma(struct mm_struct *mm, struct vm_area_struct *vma,
 	struct vm_area_struct *new;
 	struct vm_region *region;
 	unsigned long npages;
+	MA_STATE(mas, &mm->mm_mt, vma->vm_start, vma->vm_end);
 
 	/* we're only permitted to split anonymous regions (these should have
 	 * only a single usage on the region) */
@@ -1333,7 +1382,6 @@ int split_vma(struct mm_struct *mm, struct vm_area_struct *vma,
 	if (new->vm_ops && new->vm_ops->open)
 		new->vm_ops->open(new);
 
-	delete_vma_from_mm(vma);
 	down_write(&nommu_region_sem);
 	delete_nommu_region(vma->vm_region);
 	if (new_below) {
@@ -1346,8 +1394,17 @@ int split_vma(struct mm_struct *mm, struct vm_area_struct *vma,
 	add_nommu_region(vma->vm_region);
 	add_nommu_region(new->vm_region);
 	up_write(&nommu_region_sem);
-	add_vma_to_mm(mm, vma);
-	add_vma_to_mm(mm, new);
+	if (mas_preallocate(&mas, vma, GFP_KERNEL)) {
+		pr_warn("Allocation of vma tree for process %d failed\n",
+		       current->pid);
+		return -ENOMEM;
+	}
+
+	setup_vma_to_mm(vma, mm);
+	setup_vma_to_mm(new, mm);
+	mas_set_range(&mas, vma->vm_start, vma->vm_end - 1);
+	mas_store(&mas, vma);
+	vma_mas_store(new, &mas);
 	return 0;
 }
 
@@ -1363,12 +1420,14 @@ static int shrink_vma(struct mm_struct *mm,
 
 	/* adjust the VMA's pointers, which may reposition it in the MM's tree
 	 * and list */
-	delete_vma_from_mm(vma);
+	if (delete_vma_from_mm(vma))
+		return -ENOMEM;
 	if (from > vma->vm_start)
 		vma->vm_end = from;
 	else
 		vma->vm_start = to;
-	add_vma_to_mm(mm, vma);
+	if (add_vma_to_mm(mm, vma))
+		return -ENOMEM;
 
 	/* cut the backing region down to size */
 	region = vma->vm_region;
@@ -1396,9 +1455,10 @@ static int shrink_vma(struct mm_struct *mm,
  */
 int do_munmap(struct mm_struct *mm, unsigned long start, size_t len, struct list_head *uf)
 {
+	MA_STATE(mas, &mm->mm_mt, start, start);
 	struct vm_area_struct *vma;
 	unsigned long end;
-	int ret;
+	int ret = 0;
 
 	len = PAGE_ALIGN(len);
 	if (len == 0)
@@ -1407,7 +1467,7 @@ int do_munmap(struct mm_struct *mm, unsigned long start, size_t len, struct list
 	end = start + len;
 
 	/* find the first potentially overlapping VMA */
-	vma = find_vma(mm, start);
+	vma = mas_find(&mas, end - 1);
 	if (!vma) {
 		static int limit;
 		if (limit < 5) {
@@ -1426,7 +1486,7 @@ int do_munmap(struct mm_struct *mm, unsigned long start, size_t len, struct list
 				return -EINVAL;
 			if (end == vma->vm_end)
 				goto erase_whole_vma;
-			vma = vma->vm_next;
+			vma = mas_next(&mas, end - 1);
 		} while (vma);
 		return -EINVAL;
 	} else {
@@ -1448,9 +1508,10 @@ int do_munmap(struct mm_struct *mm, unsigned long start, size_t len, struct list
 	}
 
 erase_whole_vma:
-	delete_vma_from_mm(vma);
+	if (delete_vma_from_mm(vma))
+		ret = -ENOMEM;
 	delete_vma(mm, vma);
-	return 0;
+	return ret;
 }
 
 int vm_munmap(unsigned long addr, size_t len)
@@ -1475,6 +1536,7 @@ SYSCALL_DEFINE2(munmap, unsigned long, addr, size_t, len)
  */
 void exit_mmap(struct mm_struct *mm)
 {
+	VMA_ITERATOR(vmi, mm, 0);
 	struct vm_area_struct *vma;
 
 	if (!mm)
@@ -1482,13 +1544,18 @@ void exit_mmap(struct mm_struct *mm)
 
 	mm->total_vm = 0;
 
-	while ((vma = mm->mmap)) {
-		mm->mmap = vma->vm_next;
-		delete_vma_from_mm(vma);
+	/*
+	 * Lock the mm to avoid assert complaining even though this is the only
+	 * user of the mm
+	 */
+	mmap_write_lock(mm);
+	for_each_vma(vmi, vma) {
+		cleanup_vma_from_mm(vma);
 		delete_vma(mm, vma);
 		cond_resched();
 	}
 	__mt_destroy(&mm->mm_mt);
+	mmap_write_unlock(mm);
 }
 
 int vm_brk(unsigned long addr, unsigned long len)

