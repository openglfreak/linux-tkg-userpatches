From 97030aeb5ced8bcd8f3f54cd9011d151b41c9902 Mon Sep 17 00:00:00 2001
From: Torge Matthies <openglfreak@googlemail.com>
Date: Sat, 23 Jul 2022 11:48:34 +0200
Subject: [PATCH 1/2] amd-pstate: Implement CPPC preferred core support.

See https://gist.github.com/syldrathecat/6919462dde66c0e89849d987fa40429a
---
 arch/x86/Kconfig             |  3 +-
 drivers/cpufreq/amd-pstate.c | 68 ++++++++++++++++++++++++++++++++++++
 2 files changed, 69 insertions(+), 2 deletions(-)

diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
index 111111111..111111111 100644
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@ -1041,8 +1041,7 @@ config SCHED_MC
 
 config SCHED_MC_PRIO
 	bool "CPU core priorities scheduler support"
-	depends on SCHED_MC && CPU_SUP_INTEL
-	select X86_INTEL_PSTATE
+	depends on SCHED_MC
 	select CPU_FREQ
 	default y
 	help
diff --git a/arch/x86/kernel/itmt.c b/arch/x86/kernel/itmt.c
index 9ff480e..539ce7a 100644
--- a/arch/x86/kernel/itmt.c
+++ b/arch/x86/kernel/itmt.c
@@ -131,6 +131,7 @@ int sched_set_itmt_support(void)
 
 	return 0;
 }
+EXPORT_SYMBOL_GPL(sched_set_itmt_support);
 
 /**
  * sched_clear_itmt_support() - Revoke platform's support of ITMT
@@ -203,3 +204,4 @@ void sched_set_itmt_core_prio(int prio, int core_cpu)
 		i++;
 	}
 }
+EXPORT_SYMBOL_GPL(sched_set_itmt_core_prio);
diff --git a/drivers/cpufreq/amd-pstate.c b/drivers/cpufreq/amd-pstate.c
index 111111111..111111111 100644
--- a/drivers/cpufreq/amd-pstate.c
+++ b/drivers/cpufreq/amd-pstate.c
@@ -58,6 +58,11 @@ module_param(shared_mem, bool, 0444);
 MODULE_PARM_DESC(shared_mem,
 		 "enable amd-pstate on processors with shared memory solution (false = disabled (default), true = enabled)");
 
+static bool itmt_enable = false;
+module_param(itmt_enable, bool, 0444);
+MODULE_PARM_DESC(itmt_enable,
+		 "enable preferred cores based on CPPC information (false = disabled (default), true = enabled)");
+
 static struct cpufreq_driver amd_pstate_driver;
 
 /**
@@ -477,6 +482,68 @@ static void amd_pstate_boost_init(struct amd_cpudata *cpudata)
 	amd_pstate_driver.boost_enabled = true;
 }
 
+#ifdef CONFIG_ACPI_CPPC_LIB
+
+/* The work item is needed to avoid CPU hotplug locking issues */
+static void amd_cpufreq_sched_itmt_work_fn(struct work_struct *work)
+{
+	sched_set_itmt_support();
+}
+
+static DECLARE_WORK(sched_itmt_work, amd_cpufreq_sched_itmt_work_fn);
+
+static void amd_cpufreq_set_itmt_prio(int cpu)
+{
+	static u32 max_highest_perf = 0, min_highest_perf = U32_MAX;
+	struct cppc_perf_caps cppc_perf;
+	int ret;
+
+	if (!itmt_enable)
+		return;
+
+	ret = cppc_get_perf_caps(cpu, &cppc_perf);
+	if (ret)
+		return;
+
+	if (cppc_perf.highest_perf > cpu)
+		cppc_perf.highest_perf -= cpu;
+	else
+		cppc_perf.highest_perf = 0;
+
+	/*
+	 * The priorities can be set regardless of whether or not
+	 * sched_set_itmt_support(true) has been called and it is valid to
+	 * update them at any time after it has been called.
+	 */
+	pr_info("CPU %d perf %d\n", cpu, cppc_perf.highest_perf);
+	sched_set_itmt_core_prio(cppc_perf.highest_perf, cpu);
+
+	if (max_highest_perf <= min_highest_perf) {
+		if (cppc_perf.highest_perf > max_highest_perf)
+			max_highest_perf = cppc_perf.highest_perf;
+
+		if (cppc_perf.highest_perf < min_highest_perf)
+			min_highest_perf = cppc_perf.highest_perf;
+
+		if (max_highest_perf > min_highest_perf) {
+			/*
+			 * This code can be run during CPU online under the
+			 * CPU hotplug locks, so sched_set_itmt_support()
+			 * cannot be called from here.  Queue up a work item
+			 * to invoke it.
+			 */
+			pr_info("CPU %d ITMT enable\n", cpu);
+			schedule_work(&sched_itmt_work);
+		}
+	}
+}
+
+#else /* CONFIG_ACPI_CPPC_LIB */
+static void amd_cpufreq_set_itmt_prio(int cpu)
+{
+}
+#endif /* CONFIG_ACPI_CPPC_LIB */
+
 static int amd_pstate_cpu_init(struct cpufreq_policy *policy)
 {
 	int min_freq, max_freq, nominal_freq, lowest_nonlinear_freq, ret;
@@ -558,6 +625,7 @@ static int amd_pstate_cpu_init(struct cpufreq_policy *policy)
 		WRITE_ONCE(cpudata->cppc_req_cached, value);
 	}
 	amd_pstate_boost_init(cpudata);
+	amd_cpufreq_set_itmt_prio(policy->cpu);
 
 	return 0;
 
-- 
2.37.1

